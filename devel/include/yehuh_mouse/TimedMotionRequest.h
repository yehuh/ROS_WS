// Generated by gencpp from file yehuh_mouse/TimedMotionRequest.msg
// DO NOT EDIT!


#ifndef YEHUH_MOUSE_MESSAGE_TIMEDMOTIONREQUEST_H
#define YEHUH_MOUSE_MESSAGE_TIMEDMOTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yehuh_mouse
{
template <class ContainerAllocator>
struct TimedMotionRequest_
{
  typedef TimedMotionRequest_<ContainerAllocator> Type;

  TimedMotionRequest_()
    : left_hz(0)
    , right_hz(0)
    , duration_ms(0)  {
    }
  TimedMotionRequest_(const ContainerAllocator& _alloc)
    : left_hz(0)
    , right_hz(0)
    , duration_ms(0)  {
  (void)_alloc;
    }



   typedef int16_t _left_hz_type;
  _left_hz_type left_hz;

   typedef int16_t _right_hz_type;
  _right_hz_type right_hz;

   typedef uint32_t _duration_ms_type;
  _duration_ms_type duration_ms;





  typedef boost::shared_ptr< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TimedMotionRequest_

typedef ::yehuh_mouse::TimedMotionRequest_<std::allocator<void> > TimedMotionRequest;

typedef boost::shared_ptr< ::yehuh_mouse::TimedMotionRequest > TimedMotionRequestPtr;
typedef boost::shared_ptr< ::yehuh_mouse::TimedMotionRequest const> TimedMotionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator1> & lhs, const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.left_hz == rhs.left_hz &&
    lhs.right_hz == rhs.right_hz &&
    lhs.duration_ms == rhs.duration_ms;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator1> & lhs, const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yehuh_mouse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d70b1c52f947559f961bed5aa1647139";
  }

  static const char* value(const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd70b1c52f947559fULL;
  static const uint64_t static_value2 = 0x961bed5aa1647139ULL;
};

template<class ContainerAllocator>
struct DataType< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yehuh_mouse/TimedMotionRequest";
  }

  static const char* value(const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 left_hz\n"
"int16 right_hz\n"
"uint32 duration_ms\n"
;
  }

  static const char* value(const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_hz);
      stream.next(m.right_hz);
      stream.next(m.duration_ms);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TimedMotionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yehuh_mouse::TimedMotionRequest_<ContainerAllocator>& v)
  {
    s << indent << "left_hz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_hz);
    s << indent << "right_hz: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_hz);
    s << indent << "duration_ms: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.duration_ms);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YEHUH_MOUSE_MESSAGE_TIMEDMOTIONREQUEST_H
